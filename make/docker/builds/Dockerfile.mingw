ARG arch=x86_64

FROM debian:bookworm-slim AS mingw-x86_64
ENV arch=x86_64 execprefix=x86_64-w64-mingw32- addressmodel=64

FROM debian:bookworm-slim AS mingw-x86
ENV arch=x86 execprefix=i686-w64-mingw32- addressmodel=32

FROM debian:bookworm-slim AS mingw-arm64
ENV arch=arm64 execprefix=aarch64-w64-mingw32- addressmodel=64

FROM mingw-${arch}
ARG cores=12
RUN apt-get update && \
    apt-get install -y --no-install-recommends ca-certificates wget xz-utils bzip2 git make zip nano less sudo cmake \
      g++ gcc python3-minimal ccache && \
    rm -rf /var/lib/apt/lists/* && \
    useradd -m -s /bin/bash -U -G users,sudo -d /build build && \
    echo '%sudo ALL = (root) NOPASSWD: ALL' >> /etc/sudoers

USER build
WORKDIR /build

ENV prebuilt=/build/prebuilt toolchains=/build/toolchains

ARG llvm_mingw=20230614
RUN mkdir -p ${toolchains} && cd ${toolchains} && \
    wget -q https://github.com/mstorsjo/llvm-mingw/releases/download/${llvm_mingw}/llvm-mingw-${llvm_mingw}-msvcrt-ubuntu-20.04-x86_64.tar.xz -O- | tar -xJ && \
    mv llvm-mingw* llvm-mingw

ENV PATH=${toolchains}/llvm-mingw/bin:${PATH}

# use mimic gcc toolchain to avoid .lib extension for artifacts
ARG boost=1.82.0
RUN wget -q https://github.com/boostorg/boost/releases/download/boost-${boost}/boost-${boost}.tar.xz -O - | tar -xJ && \
    (cd boost* && \
    ./bootstrap.sh clang && \
    echo "using gcc : windows : ${execprefix}g++ ;" > tools/build/src/user-config.jam && \
    ./b2 toolset=gcc-windows link=static threading=multi target-os=windows variant=release --layout=system \
      address-model=${addressmodel} cxxflags=-mno-ms-bitfields cxxflags=-ffunction-sections cxxflags=-fdata-sections \
      --with-locale --with-program_options -j${cores} \
      --includedir=${prebuilt}/boost-${boost}/include --libdir=${prebuilt}/boost-${boost}-mingw-${arch}/lib install) && \
    rm -Rf boost*

ARG qt=5.15.2
RUN bash -c "git clone --depth=1 --branch=${qt} https://github.com/qt/qt5.git" && \
    (cd qt5 && \
     ./init-repository --module-subset=qtbase,qtimageformats && \
     (cd qtbase/src/corelib && sed -i '46i#include <limits>' global/qfloat16.h text/qbytearraymatcher.h global/qendian.h) && \
     ./configure -v -xplatform win32-clang-g++ -device-option CROSS_COMPILE=${execprefix} \
      -prefix ${prebuilt}/qt-${qt}-mingw-${arch} -release -opensource -static -confirm-license -no-rpath \
      -no-dbus -no-opengl -no-openvg -no-sql-sqlite \
      -no-ico -no-gif -no-tiff -no-pch -no-glib \
      -no-directfb -no-evdev -no-tslib \
      -no-feature-testlib -no-feature-sql \
      -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -qt-webp -qt-freetype -qt-harfbuzz -schannel \
      -make libs && \
     make -j${cores} install) && \
     rm -Rf qt5*

RUN mkdir zxtune && sudo chmod o+w zxtune && cd zxtune && \
    git init && \
    git remote add --tags origin https://bitbucket.org/zxtune/zxtune.git && \
    echo "platform=mingw\narch=${arch}\ntools.python=python3\n" \
      "prebuilt.dir=${prebuilt}\nboost.version=${boost}\nqt.version=${qt}\n"\
      "host=linux\ncompiler=clang\nembed_file_cmd=cat \$(embedded_files) >> \$@\nmakepkg_cmd=(cd \$(1) && zip -9rD \$(CURDIR)/\$(2) .)\npkg_suffix=zip\n" \
      "qt.plugins=QWindowsIntegrationPlugin QWindowsVistaStylePlugin QJpegPlugin\n" \
      "libraries.qt.system.mingw=qwindows qwindowsvistastyle qtfreetype qjpeg qtlibpng qtpcre2 qtharfbuzz userenv netapi32 version winmm oleaut32 wtsapi32 dwmapi uxtheme iphlpapi secur32 crypt32 bcrypt\n" \
      "libraries.qt.mingw=FontDatabaseSupport EventDispatcherSupport ThemeSupport WindowsUIAutomationSupport\n" > variables.mak

WORKDIR /build/zxtune
COPY entrypoint.sh .
ENTRYPOINT ["./entrypoint.sh"]
CMD ["package", "-C", "apps/bundle"]
