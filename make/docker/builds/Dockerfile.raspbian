FROM debian:bookworm-slim
ARG cores=12
#Do not remove /var/lib/apt/lists due to later download
RUN apt-get update && \
    apt-get install -y --no-install-recommends wget ca-certificates gnupg2 \
      xz-utils bzip2 git make zip g++ python3-minimal sudo nano ccache && \
    useradd -m -s /bin/bash -U -G users,sudo -d /build build && \
    echo '%sudo ALL = (root) NOPASSWD: ALL' >> /etc/sudoers

RUN wget -q -O- https://archive.raspbian.org/raspbian.public.key | gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/raspbian.gpg --import && \
    chmod 644 /etc/apt/trusted.gpg.d/raspbian.gpg && \
    echo "deb [arch=armhf] http://mirrordirector.raspbian.org/raspbian/ stretch main rpi" > /etc/apt/sources.list.d/raspbian.list && \
    apt-get update

USER build
WORKDIR /build

ENV prebuilt=/build/prebuilt toolchains=/build/toolchains

# Toolchain from https://github.com/abhiTronix/raspberry-pi-cross-compilers
ARG gcc=10.3.0
RUN mkdir -p ${toolchains} && cd ${toolchains} && \
    wget -q https://sourceforge.net/projects/raspberry-pi-cross-compilers/files/Raspberry%20Pi%20GCC%20Cross-Compiler%20Toolchains/Stretch/GCC%20${gcc}/Raspberry%20Pi%201%2C%20Zero/cross-gcc-${gcc}-pi_0-1.tar.gz -O - | tar -xz && \
    mv cross-pi-gcc* armhf-linux

ARG boost=1.82.0
RUN wget -q https://github.com/boostorg/boost/releases/download/boost-${boost}/boost-${boost}.tar.xz -O - | tar -xJ && \
    (cd boost* && \
    ./bootstrap.sh && \
    echo "using gcc : ${gcc} : ${toolchains}/armhf-linux/bin/arm-linux-gnueabihf-g++  ;" > tools/build/src/user-config.jam && \
    ./b2 toolset=gcc-${gcc} link=static threading=multi target-os=linux variant=release --layout=system \
      cflags="-march=armv6 -mfpu=vfp -mfloat-abi=hard -ffunction-sections -fdata-sections" \
      --with-filesystem --with-locale --with-program_options --with-system -j${cores} \
      --includedir=${prebuilt}/boost-${boost}/include --libdir=${prebuilt}/boost-${boost}-linux-armhf/lib install) && \
    rm -Rf boost*

# Cross-root
ENV crossroot=${prebuilt}/root-linux-armhf
RUN mkdir -p ${crossroot} && cd ${crossroot} && \
    bash -c "apt-get download {libxcb{1,-icccm4,-image0,-keysyms1,-randr0,-render0,-render-util0,-shape0,-shm0,-util0,-xfixes0,-xinerama0}{,-dev},libxcb-{sync,xkb}{1,-dev},\
libx11-dev,lib{fontconfig1,freetype6}{,-dev},libxkbcommon{0,-dev},libxkbcommon-x11-{0,dev},lib{bsd0,c6,expat1,xau6,xdmcp6},\
libpng{16-16,-dev},\
zlib1g{,-dev},\
lib{asound2,pulse}-dev}:armhf" && \
    (for pkg in *.deb ; do dpkg -x ${pkg} . ; done) && \
    rm *.deb
    #echo "cd ${prebuilt}/root-linux-armhf && apt-get download \$1:armhf && dpkg -x \$1_*.deb . && echo \$1 >> packages.lst" > add_lib.sh

ARG qt=5.15.2
# fontconfig uses system libpng16, so reuse it
RUN git clone --depth=1 --branch=v${qt} https://github.com/qt/qt5.git && \
    (cd qt5 && \
     ./init-repository --module-subset=qtbase,qtimageformats && \
     echo "include(../common/linux_device_pre.conf)\n"\
        "QMAKE_CFLAGS = -march=armv6 -mfpu=vfp\n"\
        "DISTRO_OPTS += hard-float\n"\
        "EXTRA_INCLUDEPATH += \$\${CROSS_ROOT}/usr/include\n"\
        "EXTRA_LIBDIR += \$\${CROSS_ROOT}/usr/lib/arm-linux-gnueabihf\n"\
        "QMAKE_LFLAGS=-Wl,-rpath-link,\$\${CROSS_ROOT}/usr/lib/arm-linux-gnueabihf -Wl,-rpath-link,\$\${CROSS_ROOT}/lib/arm-linux-gnueabihf\n"\
        "include(../common/linux_arm_device_post.conf)\n"\
        "load(qt_config)\n" > qtbase/mkspecs/devices/linux-rasp-pi-g++/qmake.conf && \
    (cd qtbase/src/corelib && sed -i '/QT_BEGIN_NAMESPACE/i#include <limits>' global/qfloat16.h text/qbytearraymatcher.h global/qendian.h tools/qoffsetstringarray_p.h) && \
    ./configure -v -device linux-rasp-pi-g++ -prefix ${prebuilt}/qt-${qt}-linux-armhf -device-option CROSS_COMPILE=${toolchains}/armhf-linux/bin/arm-linux-gnueabihf- -device-option CROSS_ROOT=${prebuilt}/root-linux-armhf \
      -release -opensource -static -confirm-license \
      -no-opengl -no-openvg -no-rpath \
      -no-ico -no-gif -no-openssl -no-cups -no-pch -no-glib \
      -no-directfb -no-evdev -no-tslib -no-linuxfb -no-kms \
      -qpa xcb \
      -no-feature-testlib -no-feature-sql -no-feature-pdf -no-feature-printer \
      -qt-pcre -system-zlib -system-libpng -qt-libjpeg -qt-webp -fontconfig \
      -make libs && \
    make -j${cores} install) && \
    rm -Rf qt5

#Sources. Add special library dir for libz
RUN mkdir -p /build/zxtune && cd /build/zxtune && \
    git init && \
    git remote add --tags origin https://bitbucket.org/zxtune/zxtune.git && \
    echo "platform=linux\narch=armhf\npackaging=any\ntools.python=python3\nsystem.zlib=1\n" \
         "prebuilt.dir=${prebuilt}\ntoolchains.root=${toolchains}\nboost.version=${boost}\nqt.version=${qt}\n" \
         "ld_flags=-static-libstdc++\n" \
         "libraries.linux=dl pthread\n" \
         "libraries.dirs.linux+=\$(linux.armhf.crossroot)/usr/lib/arm-linux-gnueabihf\n" \
         "qt.plugins=QXcbIntegrationPlugin\n" \
         "libraries.qt.system.linux=qxcb qtpcre2 qtharfbuzz png16 fontconfig freetype" \
           "xcb xcb-icccm xcb-image xcb-keysyms xcb-randr xcb-render xcb-render-util xcb-shape xcb-shm xcb-sync xcb-xfixes xcb-xinerama xcb-xkb xkbcommon xkbcommon-x11\n" \
         "libraries.qt.linux=XcbQpa XkbCommonSupport ThemeSupport DBus EdidSupport FontDatabaseSupport ServiceSupport" > variables.mak

WORKDIR /build/zxtune
COPY entrypoint.sh .
ENTRYPOINT ["./entrypoint.sh"]
CMD ["package", "-C", "apps/bundle"]
