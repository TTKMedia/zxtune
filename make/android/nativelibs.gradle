/*
 * Native libs basic functionality
 *
 */

def getListProperty(name, defvalue) {
  def prop = localProperties.getProperty(name, defvalue)
  return prop.split()
}

def getSplittedAbiFilters() {
  return getListProperty('flavors.splitted.abifilters', '')
}

def getFatAbiFilters() {
  return getListProperty('flavors.fat.abifilters', '')
}

def getAabAbiFilters() {
  return getListProperty('flavors.thin.abifilters', '')
}

android {
    // required for stripping
    ndkVersion localProperties.getProperty("ndk.version", "")
    // store debug symbols in bundle
    defaultConfig.ndk.debugSymbolLevel 'FULL'
}

android {
    flavorDimensions 'packaging', 'api'

    splits.abi {
        def abis = getSplittedAbiFilters()
        reset()
        if (abis.length != 0) {
            enable true
            include abis
        }
    }

    productFlavors.whenObjectAdded { flavor ->
        flavor.ext.set('isBundle', false)
    }

    // Splits config is global and cannot be per-variant
    // so, it conflicts with another flavors due to non-empty ndk.abiFilters
    productFlavors {
        // Single APK
        fat {
            dimension 'packaging'
            versionNameSuffix '-fat'
            ndk.abiFilters getFatAbiFilters()
            signingConfig signingConfigs.release
        }

        // Single AAB
        aabStores.each { name -> 
          create("${name}") {
            dimension 'packaging'
            versionNameSuffix "-${name}"
            ndk.abiFilters getAabAbiFilters()
            signingConfig signingConfigs.getByName("aab_${name}")
            isBundle = true
          }
        }

        // Several APKs
        // Should not be combined with another flavors (configs)
        splitted {
            dimension 'packaging'
            versionNameSuffix '-splitted'
            signingConfig signingConfigs.release
        }

        minsdk16 {
            dimension 'api'
            versionNameSuffix '-minsdk16'
            minSdkVersion 16
        }

        minsdk23 {
            dimension 'api'
            versionNameSuffix '-minsdk23'
            minSdkVersion 23
            versionCode android.defaultConfig.versionCode + 1
        }

        minsdk28 {
            dimension 'api'
            versionNameSuffix '-minsdk28'
            minSdkVersion 28
            versionCode android.defaultConfig.versionCode + 2
        }
    }

    variantFilter { variant ->
        def isRelease = variant.buildType.name == 'release'
        def pkgFlavor = variant.flavors[0]
        assert pkgFlavor.dimension == 'packaging'
        def packaging = pkgFlavor.name
        def apiFlavor = variant.flavors[1]
        assert apiFlavor.dimension == 'api'
        def api = apiFlavor.name
        if (!isRelease && packaging != 'fat') {
            setIgnore(true)
            println "Disable ${variant.name} for developer builds"
            return
        }
        if (splits.abi.enable != (packaging == 'splitted')) {
            setIgnore(true)
            println "Disable ${variant.name} due to abi splits"
            return
        }
        if (!splits.abi.enable && pkgFlavor.ndk.abiFilters.flatten().isEmpty()) {
            setIgnore(true)
            println "Disable ${variant.name} due to empty ndk.abiFilters"
            return
        }
        if (!pkgFlavor.isBundle && api != 'minsdk16') {
            setIgnore(true)
            println "Disable ${variant.name} for apk packages"
            return
        }
    }
}

abstract class NativeLibsTask extends DefaultTask {
    @Input
    Set<String> abis = new HashSet<String>()

    private int minsdk

    @Inject
    NativeLibsTask(minsdk, sources) {
       group = 'Native'
       assert minsdk > 0
       this.minsdk = minsdk
       def flavor = "minsdk${minsdk}"
       def outDir = "${project.buildDir}/jni/${flavor}"
       inputs.files sources.main.jni.srcDirs
       outputs.dir outDir
       sources.getByName(flavor).jniLibs.srcDirs = [outDir]
    }

    @TaskAction
    void execute() {
      def cpuCount = Runtime.runtime.availableProcessors()
      def binDir = outputs.files.first()
      def flags = "android.minsdk=${minsdk}"
      inputs.files.each { jniDir ->
        callMake("multiarch=${abis.join(':')} bins_dir=${binDir} ${flags} -C ${jniDir} -j ${cpuCount}")
      }
    }

  void callMake(cmdline) {
    def fullCmd = "make platform=android ${cmdline}"
    def proc = fullCmd.execute()
    proc.consumeProcessOutput(System.out, System.out)
    assert 0 == proc.waitFor()
  }
}

android {
    productFlavors.configureEach { flavor ->
        if (flavor.dimension == 'api') {
            tasks.register("nativeLibs${flavor.name.capitalize()}", NativeLibsTask, flavor.minSdkVersion.apiLevel, android.sourceSets)
        }
    }

    applicationVariants.configureEach { variant ->
        def suffix = variant.name.capitalize()
        def apiFlavor = variant.productFlavors[1]
        def task = tasks.named("nativeLibs${apiFlavor.name.capitalize()}", NativeLibsTask) {
            abis += variant.productFlavors[0].ndk.abiFilters
            abis += splits.abiFilters
        }
        tasks.named("package${suffix}").configure {
            dependsOn task
        }
        tasks.named("merge${suffix}JniLibFolders").configure {
            dependsOn task
        }
    }
}
