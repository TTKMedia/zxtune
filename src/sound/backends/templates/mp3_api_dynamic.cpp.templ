/**
 *
 * @file
 *
 * @brief  MP3 subsystem API gate implementation
 *
 * @author vitamin.caig@gmail.com
 *
 **/

// local includes
#include "sound/backends/gates/mp3_api.h"
// common includes
#include <make_ptr.h>
// library includes
#include <debug/log.h>
#include <platform/shared_library_adapter.h>

namespace Sound::Mp3
{
  class LibraryName : public Platform::SharedLibrary::Name
  {
  public:
    LibraryName() {}

    StringView Base() const override
    {
      return "mp3lame"_sv;
    }

    std::vector<StringView> PosixAlternatives() const override
    {
      return {"libmp3lame.so.0"_sv};
    }

    std::vector<StringView> WindowsAlternatives() const override
    {
      return {"libmp3lame.dll"_sv};
    }
  };

<TMPL_INCLUDE NAME="api_dynamic.cpp.templ">

  Api::Ptr LoadDynamicApi()
  {
    static const LibraryName NAME;
    auto lib = Platform::SharedLibrary::Load(NAME);
    return MakePtr<DynamicApi>(std::move(lib));
  }
}  // namespace Sound::Mp3
